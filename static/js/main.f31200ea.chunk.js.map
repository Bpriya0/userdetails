{"version":3,"sources":["components/User.js","App.js","reportWebVitals.js","index.js"],"names":["User","url","useState","data","setData","useEffect","getUser","fetch","then","resp","json","className","align","Grid","container","direction","spacing","width","height","item","xs","title","columns","field","options","actionsColumnIndex","addRowPosition","editable","onRowAdd","newData","Promise","resolve","reject","method","headers","body","JSON","stringify","onRowUpdate","oldData","id","onRowDelete","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA8GeA,EAvGF,WAEb,IAAMC,EAAM,wDACV,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,WACdC,MAAMN,GAAKO,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAC1BF,MAAK,SAAAC,GAAI,OAAIL,EAAQK,OAoBxB,OACI,sBAAKE,UAAU,QAAf,UACA,oBAAIC,MAAM,SAAV,0BAEA,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,MAAM,OAAOC,OAAQ,IAAjE,SACQ,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SAGR,cAAC,IAAD,CACIC,MAAM,aACFC,QA3BA,CACZ,CAAED,MAAO,UAAWE,MAAO,UAC3B,CACEF,MAAO,KAAME,MAAO,MAEtB,CACEF,MAAO,OAAQE,MAAO,QAElB,CAAEF,MAAO,QAASE,MAAM,SAC9B,CACEF,MAAO,OAAQE,MAAO,SAkBpBpB,KAAMA,EACNqB,QAAS,CAACC,oBAAqB,EAAGC,eAAgB,SAEnDC,SAAU,CACRC,SAAS,SAACC,GAAD,OAAa,IAAIC,SAAQ,SAACC,EAASC,GAE3CzB,MAAMN,EAAK,CACTgC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAKC,KAAKC,UAAUR,KACnBrB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACpBF,MAAK,SAAAC,GACJH,IACAyB,WAIHO,YAAa,SAACT,EAASU,GAAV,OAAsB,IAAIT,SAAS,SAACC,EAASC,GACzDzB,MAAMN,EAAM,IAAMsC,EAAQC,GAAI,CACtCP,OAAQ,MACRC,QAAS,CACP,eAAe,oBAEjBC,KAAKC,KAAKC,UAAUR,KACnBrB,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACrBF,MAAK,SAAAC,GACJH,IACAyB,WAIOU,YAAa,SAACF,GAAD,OAAa,IAAIT,SAAQ,SAACC,EAASC,GAC/CzB,MAAMN,EAAM,IAAMsC,EAAQC,GAAG,CAC1BP,OAAQ,SACRC,QAAQ,CACN,eAAgB,sBAGhB1B,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACpBF,MAAK,SAAAC,GACJH,IACAyB,sB,OC/ECW,MARf,WACE,OACE,mCACA,cAAC,EAAD,OCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f31200ea.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n//import MaterialTable from 'material-table';\r\nimport MaterialTable from 'material-table'\r\nimport  {Grid}  from '@material-ui/core';\r\nimport { Container } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst User = () => {\r\n\r\nconst url = \"https://jsonplaceholder.typicode.com/posts/1/comments\"\r\n  const [data, setData] = useState([])\r\n  useEffect(() => {\r\n    getUser()\r\n  }, [])\r\n\r\n  const getUser = () => {\r\n    fetch(url).then(resp => resp.json())\r\n      .then(resp => setData(resp))\r\n  }\r\n\r\nconst columns = [\r\n    { title: \" PostId\", field: \"postId\"},\r\n    {\r\n      title: \"Id\", field: \"id\",\r\n         },\r\n    {\r\n      title: \"Name\", field: \"name\",\r\n          },\r\n          { title: \"Email\", field:\"email\"},\r\n    {\r\n      title: \"Body\", field: 'body',\r\n      \r\n    }]\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"Table\">\r\n        <h1 align=\"center\">User Details</h1>\r\n\r\n        <Grid container direction=\"row\" spacing={1} width=\"100%\" height={500}>\r\n                <Grid item xs={12}>\r\n        \r\n        \r\n        <MaterialTable\r\n            title=\"reactTable\"\r\n                columns={columns}\r\n        data={data}\r\n        options={{actionsColumnIndex: -1, addRowPosition: \"first\"}}\r\n\r\n       editable={{\r\n         onRowAdd:(newData) => new Promise((resolve, reject) =>{\r\n\r\n          fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n              'Content-type': \"application/json\"\r\n            },\r\n            body:JSON.stringify(newData)\r\n          }).then(resp => resp.json())\r\n          .then(resp =>{\r\n            getUser()\r\n            resolve()\r\n          })\r\n         }),\r\n\r\n         onRowUpdate: (newData, oldData) => new Promise ((resolve, reject) =>{\r\n          fetch(url + \"/\" + oldData.id, {\r\n  method: \"PUT\",\r\n  headers: {\r\n    \"content-type\":\"application/json\"\r\n  },\r\n  body:JSON.stringify(newData)\r\n}).then (resp => resp.json())\r\n.then(resp =>{\r\n  getUser()\r\n  resolve()\r\n})\r\n         }),\r\n\r\n         onRowDelete: (oldData) => new Promise((resolve, reject)=>{\r\n          fetch(url + \"/\" + oldData.id,{\r\n             method: \"DELETE\",\r\n             headers:{\r\n               \"contain-type\": \"application/json\"\r\n             },\r\n                       \r\n            }).then(resp => resp.json())\r\n            .then(resp => {\r\n              getUser()\r\n              resolve()\r\n            })\r\n         })\r\n\r\n       }}\r\n      \r\n      />\r\n      \r\n      \r\n     </Grid>\r\n     </Grid>\r\n            \r\n            \r\n            </div>\r\n          \r\n          \r\n      );\r\n    }\r\n\r\nexport default User;","import React from \"react\";\nimport User from \"./components/User\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n    <User />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}